import java.nio.file.Files

buildscript {
    def libDir = {
        def pluginBuildDir = buildDir.toPath().parent.parent.parent.parent
        assert Files.exists(pluginBuildDir.resolve("libs")), "example project was moved, can't find libs directory"
        String.valueOf(pluginBuildDir.resolve("libs").toAbsolutePath())
    }
    repositories {
        mavenLocal()
        jcenter()
        flatDir(name: 'fileRepo', dirs: libDir)
    }
    dependencies {
        classpath 'net.serenity-bdd:serenity-junit:1.1.11-SNAPSHOT'
        classpath 'net.serenity-bdd:serenity-core:1.1.11-SNAPSHOT'
    }
}

def pluginBuildDir = buildDir.toPath().parent.parent.parent.parent
def libDir = {
    assert Files.exists(pluginBuildDir.resolve("libs")), "example project was moved, can't find libs directory"
    String.valueOf(pluginBuildDir.resolve("libs").toAbsolutePath())
}

repositories {
    mavenLocal()
    jcenter()
    flatDir(name: 'fileRepo', dirs: libDir)

}

dependencies {
    compile fileTree(libDir)
    testRuntime fileTree(libDir)
    compile('junit:junit:4.11')
    compile('org.assertj:assertj-core:1.7.0')
    compile('org.slf4j:slf4j-simple:1.7.7')
    def classpathSource = pluginBuildDir.resolve("classpath").resolve("plugin-classpath.txt")
    assert Files.exists(classpathSource), "plugin-classpath.txt was not generated"
    classpathSource.readLines().each {
        testRuntime files("$it")
    }
}

gradle.startParameter.continueOnFailure = true